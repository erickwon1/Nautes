package com.nautestech.www.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.nautestech.www.model.RegPhone;
import com.nautestech.www.servicImpl.RegPhoneService;

import jakarta.validation.Valid;
import lombok.AllArgsConstructor;

@Controller
@AllArgsConstructor
public class RegPhoneController {
	private RegPhoneService regPhoneService;

	@RequestMapping(value = "/management/regPhone_add", method = { RequestMethod.GET, RequestMethod.POST })
	public String regPhonedd(Pageable pageable, @ModelAttribute RegPhone regPhone, Model model) {
		Page<RegPhone> regPhonePage = regPhoneService.getRegPhone(regPhone, pageable);
		List<RegPhone> regphones = regPhonePage.getContent();
		int pageBlock = 5;// 한블럭에 나올 페이지 수
		int startBlockPage = (regPhonePage.getNumber() / pageBlock) * pageBlock;
		int endBlockPage = startBlockPage + pageBlock - 1;
		boolean previous = startBlockPage >= pageBlock ? true : false;
		boolean next = endBlockPage < regPhonePage.getTotalPages() - 1 ? true : false;
		if (endBlockPage >= regPhonePage.getTotalPages()) {
			if (regPhonePage.getTotalPages() == 0) {
				endBlockPage = regPhonePage.getTotalPages();
			} else {
				endBlockPage = regPhonePage.getTotalPages() - 1;
			}
		}
		HashMap<String, Object> paging = new HashMap<>();
		paging.put("totalPages", regPhonePage.getTotalPages());
		paging.put("hasPrevious", previous);
		paging.put("number", regPhonePage.getNumber());
		paging.put("hasNext", next);
		paging.put("pageBlock", pageBlock);
		paging.put("startBlockPage", startBlockPage);
		paging.put("endBlockPage", endBlockPage);

		model.addAttribute("regphones", regphones);
		model.addAttribute("paging", paging);

		return "/management/regPhone_add";
	}

	@PostMapping("/management/regPhone_add/insert")
	@ResponseBody
	public ResponseEntity<?> regPhonedd(@Valid @ModelAttribute RegPhone regPhone) {
		regPhoneService.setinsert(regPhone);
		regPhoneService.setupdate();
		return ResponseEntity.ok("OK");
	}

	@PostMapping("/management/regPhone_add/delete")
	@ResponseBody
	public int deleteRegPhone(@RequestBody Map<String, List<String>> requestData) {
		List<String> rp_seq = requestData.get("rp_seq");
		List<Integer> iList = rp_seq.stream().map(Integer::parseInt).collect(Collectors.toList());
		int deletenum = regPhoneService.setdelete(iList);
		regPhoneService.setupdate();
		return deletenum;
	}

	@PostMapping("/management/regPhone_add/modify")
	@ResponseBody
	public void modifyRegPhone(@RequestBody Map<String, Object> requestData) {
		List<String> rp_seq = (List<String>) requestData.get("rp_seq");
		List<Integer> rpList = rp_seq.stream().map(Integer::parseInt).collect(Collectors.toList());

		String rp_useflag = requestData.get("rp_useflag") != null ? requestData.get("rp_useflag").toString() : null;
		String rp_display_name = requestData.get("rp_display_name") != null
				? requestData.get("rp_display_name").toString()
				: null;
		String rp_username = requestData.get("rp_username") != null ? requestData.get("rp_username").toString() : null;
		String rp_auth_user_name = requestData.get("rp_auth_user_name") != null
				? requestData.get("rp_auth_user_name").toString()
				: null;
		String rp_password = requestData.get("rp_password") != null ? requestData.get("rp_password").toString() : null;
		Integer rp_expire_time = requestData.get("rp_expire_time") != null
				? Integer.parseInt(requestData.get("rp_expire_time").toString())
				: null;
		Integer rp_retry_period = requestData.get("rp_retry_period") != null
				? Integer.parseInt(requestData.get("rp_retry_period").toString())
				: null;
		String rp_regdate = requestData.get("rp_regdate") != null ? requestData.get("rp_regdate").toString() : null;
		String rp_status = requestData.get("rp_status") != null ? requestData.get("rp_status").toString() : null;
		String rp_updateTime = requestData.get("rp_updateTime") != null ? requestData.get("rp_updateTime").toString()
				: null;

		RegPhone regPhone = new RegPhone();
		regPhone.setRp_useflag(rp_useflag);
		regPhone.setRp_display_name(rp_display_name);
		regPhone.setRp_username(rp_username);
		regPhone.setRp_auth_user_name(rp_auth_user_name);
		regPhone.setRp_password(rp_password);
		regPhone.setRp_expire_time(rp_expire_time);
		regPhone.setRp_retry_period(rp_retry_period);
		regPhone.setRp_regdate(rp_regdate);
		regPhone.setRp_status(rp_status);
		regPhone.setRp_updateTime(rp_updateTime);

		regPhoneService.setupdate();
		regPhoneService.setmodify(rpList, regPhone);
	}
}
