package com.nautestech.www.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.nautestech.www.model.CustomUserDetail;
import com.nautestech.www.serviceImpl.CustomUserDetailsService;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;
import lombok.RequiredArgsConstructor;
import utils.CertificationNumber;

@Controller
@RequiredArgsConstructor
public class LoginController {

	@Autowired
	private CustomUserDetailsService userDetailsService;

	@PostMapping("/preLogin")
	@ResponseBody
	public ResponseEntity<?> preLogin(HttpServletRequest request, @RequestParam("login_id") String loginId,
			@RequestParam("password") String password) {

		CustomUserDetail user = (CustomUserDetail) userDetailsService.loadUserByUsername(loginId);
		PasswordEncoder encoder = new BCryptPasswordEncoder();

		if (user == null || !encoder.matches(password, user.getPassword())) {
			return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("아이디 또는 비밀번호가 잘못되었습니다.");
		}

		CertificationNumber certGen = new CertificationNumber();
		int code = certGen.createCertification_Number(6);

		// 실제 환경에서는 SMS API를 통해 전송
		System.out.println("인증번호: " + code);

		HttpSession session = request.getSession();
		session.setAttribute("pre_auth_user", user);
		session.setAttribute("auth_code", String.valueOf(code));
		session.setMaxInactiveInterval(180); // 3분

		return ResponseEntity.ok("인증번호가 발송되었습니다.");
	}

	@PostMapping("/verifyCode")
	@ResponseBody
	public ResponseEntity<?> verifyCode(HttpServletRequest request, @RequestParam("code") String code) {
		HttpSession session = request.getSession(false);
		if (session == null)
			return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("세션이 만료되었습니다.");

		String savedCode = (String) session.getAttribute("auth_code");
		CustomUserDetail user = (CustomUserDetail) session.getAttribute("pre_auth_user");

		if (savedCode == null || user == null)
			return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("유효하지 않은 요청입니다.");

		if (!savedCode.equals(code))
			return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("인증번호가 틀렸습니다.");

		UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(user.getUsername(), null,
				user.getAuthorities());

		SecurityContextHolder.getContext().setAuthentication(auth);
		session.removeAttribute("auth_code");
		session.removeAttribute("pre_auth_user");

		return ResponseEntity.ok("로그인 성공");
	}

	@RequestMapping(value = "/logout", method = { RequestMethod.GET, RequestMethod.POST })
	public String logoutPage(HttpSession session) {
		session.invalidate();
		return "login/login";
	}
}
