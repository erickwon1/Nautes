package com.nautestech.www.controller;

import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.nautestech.www.serviceImpl.GoogleOTPService;

@RestController
public class OTPController {

	@Autowired
	private GoogleOTPService googleOTPService;

	@GetMapping("/otp/setup")
	public Map<String, String> setupOTP(@RequestParam String email) {
		String secret = googleOTPService.createSecretKey(); // 사용자마다 저장
		String issuer = "MySystem";

		// DB 등에 email - secret 매핑 저장해야 함

		String qrText = googleOTPService.buildQrText(secret, email, issuer);

		Map<String, String> response = new HashMap<>();
		response.put("secret", secret);
		response.put("qrText", qrText); // 이걸 /generateQRCode?text=... 에 넣으면 QR 생성
		return response;
	}

	@PostMapping("/otp/verify")
	public ResponseEntity<?> verifyOTP(@RequestParam String email, @RequestParam int code) {
		// DB 등에서 사용자 email로 secret 불러오기
		String secret = userSecretFromDatabase(email);

		boolean isValid = googleOTPService.verifyCode(secret, code);

		if (isValid) {
			return ResponseEntity.ok("인증 성공");
		} else {
			return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("인증 실패");
		}
	}

	private String userSecretFromDatabase(String email) {
		// 여기에 DB 연동하여 사용자 OTP secret 가져오기
		return "ABC123DEF456"; // 예시
	}
}