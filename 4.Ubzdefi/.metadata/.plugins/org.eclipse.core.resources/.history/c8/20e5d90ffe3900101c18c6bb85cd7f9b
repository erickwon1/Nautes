package com.nautestech.www.controller;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.nautestech.www.model.Admin;
import com.nautestech.www.model.CustomUserDetail;
import com.nautestech.www.model.SMS;
import com.nautestech.www.serviceImpl.AdminService;
import com.nautestech.www.serviceImpl.CustomUserDetailsService;
import com.nautestech.www.serviceImpl.SMSService;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;
import lombok.RequiredArgsConstructor;
import utils.CertificationNumber;

@Controller
@RequiredArgsConstructor
public class LoginController {

	private final CustomUserDetailsService userDetailsService;
	private final SMSService smsService;
	private final AdminService adminService;

	@RequestMapping(value = "/", method = { RequestMethod.GET, RequestMethod.POST })
	public String loginPage(@RequestParam(required = false) String error) {
		if (error != null) {
			System.err.println("로그인 실패");
		}
		return "login/login";
	}

	@PostMapping("/preLogin")
	@ResponseBody
	public ResponseEntity<?> preLogin(HttpServletRequest request, @RequestParam("login_id") String login_id,
			@RequestParam("login_pwd") String login_pwd) {

		CustomUserDetail user;
		try {
			user = (CustomUserDetail) userDetailsService.loadUserByUsername(login_id);
		} catch (UsernameNotFoundException e) {
			return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("아이디 또는 비밀번호가 잘못되었습니다.");
		}

		PasswordEncoder encoder = new BCryptPasswordEncoder();

		if (!encoder.matches(login_pwd, user.getPassword())) {
			return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("아이디 또는 비밀번호가 잘못되었습니다.");
		}

		// 인증번호 생성
		CertificationNumber certGen = new CertificationNumber();
		int code = certGen.createCertification_Number(6);

		Admin admin = adminService.findById(login_id);

		HttpSession session = request.getSession();
		session.setAttribute("pre_auth_user", user);
		session.setAttribute("phone", admin.getAdmin_phone());
		session.setAttribute("auth_code", code);
		session.setMaxInactiveInterval(180); // 3분

		// 인증번호 SMS 발송
		SMS sms = new SMS();
		sms.setReceive_phone(admin.getAdmin_phone());
		sms.setSms_content("인증번호는 [" + code + "] 입니다.");
		sms.setRequest_user(admin.getLogin_id());
		sms.setSend_memo("로그인 인증");

		smsService.sendSMS(sms);

		System.err.println("인증번호: " + code);
		return ResponseEntity.ok("인증번호가 발송되었습니다.");
	}

	@PostMapping("/verifyCode")
	@ResponseBody
	public ResponseEntity<?> verifyCode(HttpServletRequest request, @RequestParam("code") int code) {
		HttpSession session = request.getSession(false);
		if (session == null) {
			return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("세션이 만료되었습니다.");
		}

		String phone = (String) session.getAttribute("phone");
		if (phone == null) {
			return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("전화번호 정보가 없습니다.");
		}

		int savedCode = (int) session.getAttribute("auth_code");
		if (savedCode != code) {
			return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("인증번호가 틀렸거나 만료되었습니다.");
		}

		CustomUserDetail user = (CustomUserDetail) session.getAttribute("pre_auth_user");
		if (user == null) {
			return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("유효하지 않은 요청입니다.");
		}

		UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(user.getUsername(), null,
				user.getAuthorities());
		SecurityContextHolder.getContext().setAuthentication(auth);

		session.setAttribute("SPRING_SECURITY_CONTEXT", SecurityContextHolder.getContext());

		session.removeAttribute("pre_auth_user");
		session.removeAttribute("phone");
		session.removeAttribute("auth_code");

		return ResponseEntity.ok("로그인 성공");
	}

	@RequestMapping(value = "/logout", method = { RequestMethod.GET, RequestMethod.POST })
	public String logoutPage(HttpSession session) {
		session.invalidate();
		return "login/login";
	}
}
