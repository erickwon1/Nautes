package com.nautestech.www.controller;

import java.util.HashMap;
import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.RouteMatcher.Route;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.nautestech.www.serviceImpl.AdminMenuService;

@Controller
public class AdminMenuController {

	private final AdminMenuService adminMenuService;

	public AdminMenuController(AdminMenuService adminMenuServiceImpl) {
		this.adminMenuServiceImpl = adminMenuServiceImpl;
	}
	
	@GetMapping("/admin/menu")
	public String sessionsInfo(Model model) {
		List<CurrentSessionInfo> sessions = currentSessionInfoService.getSessions();

		model.addAttribute("sessions", sessions);

		return "/management/sessions_info";
	}

	@RequestMapping(value = "/management/routingTable_add", method = { RequestMethod.GET, RequestMethod.POST })
	public String routingTableAdd(Pageable pageable, @ModelAttribute Route route, Model model) {
		Page<Route> routePage = adminMenuServiceImpl.getRoutes(route, pageable);
		List<Route> routes = routePage.getContent();
		int pageBlock = 5;// 한블럭에 나올 페이지 수
		int startBlockPage = (routePage.getNumber() / pageBlock) * pageBlock;
		int endBlockPage = startBlockPage + pageBlock - 1;
		boolean previous = startBlockPage >= pageBlock ? true : false;
		boolean next = endBlockPage < routePage.getTotalPages() - 1 ? true : false;
		if (endBlockPage >= routePage.getTotalPages()) {
			if (routePage.getTotalPages() == 0) {
				endBlockPage = routePage.getTotalPages();
			} else {
				endBlockPage = routePage.getTotalPages() - 1;
			}
		}
		HashMap<String, Object> paging = new HashMap<>();
		paging.put("totalPages", routePage.getTotalPages());
		paging.put("hasPrevious", previous);
		paging.put("number", routePage.getNumber());
		paging.put("hasNext", next);
		paging.put("pageBlock", pageBlock);
		paging.put("startBlockPage", startBlockPage);
		paging.put("endBlockPage", endBlockPage);

		model.addAttribute("routes", routes);
		model.addAttribute("paging", paging);

		routeService.setupdate();

		return "/management/routingTable_add";
	}
}
